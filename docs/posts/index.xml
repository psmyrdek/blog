<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Przemek Smyrdek / Rozwijaj się! Programowanie i wiele więcej.</title>
    <link>https://smyrdek.com/posts/</link>
    <description>Recent content in Posts on Przemek Smyrdek / Rozwijaj się! Programowanie i wiele więcej.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pl-PL</language>
    <lastBuildDate>Wed, 31 Jul 2019 19:51:27 +0200</lastBuildDate>
    
	<atom:link href="https://smyrdek.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Learning Funnel</title>
      <link>https://smyrdek.com/posts/the-learning-funnel/</link>
      <pubDate>Wed, 31 Jul 2019 19:51:27 +0200</pubDate>
      
      <guid>https://smyrdek.com/posts/the-learning-funnel/</guid>
      <description>Thanks to all kinds of activities related to software development I’m involved in, from time to time I have a chance to talk to people entering this career path and listen to their struggles. One of the issues that occur the most often is caused by so-called ‘paradox of choice’ - a situation where the total number of choices one has to face (in terms of technology, programming language or the next best framework) makes it impossible to stay focused on the most important topic and learn efficiently.</description>
    </item>
    
    <item>
      <title>The signs of maturity</title>
      <link>https://smyrdek.com/posts/signs-software-engineering-maturity/</link>
      <pubDate>Thu, 23 May 2019 19:15:11 +0200</pubDate>
      
      <guid>https://smyrdek.com/posts/signs-software-engineering-maturity/</guid>
      <description>I&amp;rsquo;ve been working in software engineering for more than five years.
Probably I should not call myself &amp;lsquo;junior developer&amp;rsquo; anymore, but using the word &amp;lsquo;senior&amp;rsquo; is also not that obvious in some cases. I would say that I&amp;rsquo;m right in the middle of a transition process.
Due to the fact that I&amp;rsquo;m not that far from being labeled as &amp;lsquo;junior&amp;rsquo;, and also not super comfortable with a word &amp;lsquo;senior&amp;rsquo; (especially when sitting next to my colleagues), I decided to write a few words about the most meaningful changes in my own understanding the position of software developer.</description>
    </item>
    
    <item>
      <title>Web Components - The Next Big Thing of Modern Web?</title>
      <link>https://smyrdek.com/posts/web-components-qa/</link>
      <pubDate>Fri, 12 Apr 2019 17:29:16 +0200</pubDate>
      
      <guid>https://smyrdek.com/posts/web-components-qa/</guid>
      <description>Recently I&amp;rsquo;ve been involved in multiple discussions around Web Components and I noticed that there are questions that still introduce a lot of confusion among front-end developers. By creating this post I&amp;rsquo;m trying to summarize my point of view on this very important topic of the modern web.
Q: Do I really need them? Let’s be honest - if you’re interested in Web Components only because of the article you’ve just read, or the talk you’ve just watched the answer is probably - no, not immediately.</description>
    </item>
    
    <item>
      <title>Three Myths about Successful Software Engineers</title>
      <link>https://smyrdek.com/posts/three-myths/</link>
      <pubDate>Wed, 10 Apr 2019 11:27:56 +0200</pubDate>
      
      <guid>https://smyrdek.com/posts/three-myths/</guid>
      <description>Let me ask you a question - what are the most important traits of a successful software engineer? Experienced person would probably say &amp;ldquo;-It depends&amp;rdquo;. That&amp;rsquo;s true, all of this depends on our work and life experience. Back in time, when I was was on the beginning of my adventure with software development, I would say that successful people have to know everything, they are working in a &amp;ldquo;one man army&amp;rdquo; mode, and they can solve every single problem you&amp;rsquo;re putting in front of them.</description>
    </item>
    
    <item>
      <title>Applying CQRS to Product Design</title>
      <link>https://smyrdek.com/posts/applying-cqrs-to-product-design/</link>
      <pubDate>Mon, 04 Mar 2019 18:25:15 +0100</pubDate>
      
      <guid>https://smyrdek.com/posts/applying-cqrs-to-product-design/</guid>
      <description>Do you know what the CQRS is? Command Query Responsibility Segregation is an architectural pattern used heavily in all kinds of back-end systems, which basically tells you that commands (mutations of the state) should be separated from the queries (parts where you read the data, i.e. for the purpose of UI or reporting).
There are multiple reasons why engineers apply this pattern to their projects, but these two are probably worth mentioning the most:</description>
    </item>
    
    <item>
      <title>Five reasons to invest more time in Knowledge Sharing</title>
      <link>https://smyrdek.com/posts/knowledge-sharing-values/</link>
      <pubDate>Thu, 24 Jan 2019 11:18:46 +0200</pubDate>
      
      <guid>https://smyrdek.com/posts/knowledge-sharing-values/</guid>
      <description>I&amp;rsquo;m a strong advocate of all kinds of activities that could be summarized as knowledge sharing, due to their impact on your programming career. Some of you may agree with my point of view, but others will ask — why does it really matter?
Today I’d like you to give you some example values that knowledge sharing brings to the table when it’s a part of your daily routine.</description>
    </item>
    
  </channel>
</rss>