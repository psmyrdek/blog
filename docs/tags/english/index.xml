<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>English on Develop Yourself - Helping developers grow and work better</title>
    <link>https://smyrdek.com/tags/english/</link>
    <description>Recent content in English on Develop Yourself - Helping developers grow and work better</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 23 May 2019 19:15:11 +0200</lastBuildDate>
    
	<atom:link href="https://smyrdek.com/tags/english/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The signs of maturity</title>
      <link>https://smyrdek.com/posts/signs-software-engineering-maturity/</link>
      <pubDate>Thu, 23 May 2019 19:15:11 +0200</pubDate>
      
      <guid>https://smyrdek.com/posts/signs-software-engineering-maturity/</guid>
      <description>I&amp;rsquo;ve been working in software engineering for more than five years.
Probably I should not call myself &amp;lsquo;junior developer&amp;rsquo; anymore, but using the word &amp;lsquo;senior&amp;rsquo; is also not that obvious in some cases. I would say that I&amp;rsquo;m right in the middle of a transition process.
Due to the fact that I&amp;rsquo;m not that far from being labeled as &amp;lsquo;junior&amp;rsquo;, and also not super comfortable with a word &amp;lsquo;senior&amp;rsquo; (especially when sitting next to my colleagues), I decided to write a few words about the most meaningful changes in my own understanding the position of software developer.</description>
    </item>
    
    <item>
      <title>Applying CQRS to Product Design</title>
      <link>https://smyrdek.com/posts/applying-cqrs-to-product-design/</link>
      <pubDate>Mon, 04 Mar 2019 18:25:15 +0100</pubDate>
      
      <guid>https://smyrdek.com/posts/applying-cqrs-to-product-design/</guid>
      <description>Do you know what the CQRS is? Command Query Responsibility Segregation is an architectural pattern used heavily in all kinds of back-end systems, which basically tells you that commands (mutations of the state) should be separated from the queries (parts where you read the data, i.e. for the purpose of UI or reporting).
There are multiple reasons why engineers apply this pattern to their projects, but these two are probably worth mentioning the most:</description>
    </item>
    
  </channel>
</rss>