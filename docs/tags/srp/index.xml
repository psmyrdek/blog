<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Srp on Przemek Smyrdek - O rozwoju, nie tylko w programowaniu</title>
    <link>https://smyrdek.com/tags/srp/</link>
    <description>Recent content in Srp on Przemek Smyrdek - O rozwoju, nie tylko w programowaniu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pl-pl</language>
    <lastBuildDate>Mon, 04 Mar 2019 18:25:15 +0100</lastBuildDate>
    
	<atom:link href="https://smyrdek.com/tags/srp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Applying CQRS to Product Design</title>
      <link>https://smyrdek.com/posts/applying-cqrs-to-product-design/</link>
      <pubDate>Mon, 04 Mar 2019 18:25:15 +0100</pubDate>
      
      <guid>https://smyrdek.com/posts/applying-cqrs-to-product-design/</guid>
      <description>Do you know what the CQRS is? Command Query Responsibility Segregation is an architectural pattern used heavily in all kinds of back-end systems, which basically tells you that commands (mutations of the state) should be separated from the queries (parts where you read the data, i.e. for the purpose of UI or reporting).
There are multiple reasons why engineers apply this pattern to their projects, but these two are probably worth mentioning the most:</description>
    </item>
    
  </channel>
</rss>